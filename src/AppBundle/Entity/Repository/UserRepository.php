<?php

namespace AppBundle\Entity\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository {

    public function getOneByToken($token) {

        $sql = "SELECT u.id, u.name, u.email, u.platform, u.token, u.photo, u.facebook_id, u.twitter_id FROM users u WHERE u.token = :token";

        $users = $this->getEntityManager()->getConnection()->executeQuery($sql, array(
            'token' => $token
        ))->fetchAll();

        if(count($users) > 0) {
            $user = $this->getFavouritePersonas($users[0]);
            $user = $this->getFavouritePlaces($user);
            return $user;
        } else {
            return null;
        }
    }


    private function getFavouritePersonas($user) {
        $sqlRelatedPersonas = "SELECT per.*, UNIX_TIMESTAMP(CAST(per.created_at AS DATETIME)) as created_at_timestamp,
                                  CASE
                                     WHEN f.persona_id IS NOT NULL AND f.user_id = :userId THEN true
                                     ELSE false
                                  END as favourited,
                                  CASE
                                     WHEN l.persona_id IS NOT NULL AND l.user_id = :userId THEN true
                                     ELSE false
                                  END as liked,
                                  (SELECT COUNT(*) FROM persona_favourites fav WHERE fav.persona_id = f.persona_id) as totalFav,
                                  (SELECT COUNT(*) FROM persona_likes lik WHERE lik.persona_id = l.persona_id) as totalLikes
                              FROM personas per
                              INNER JOIN persona_favourites f ON f.persona_id = per.id
                              LEFT JOIN persona_likes l ON l.persona_id = per.id
                              WHERE f.user_id = :userId
                              GROUP BY per.id";
        $personas = $this->getEntityManager()->getConnection()->executeQuery($sqlRelatedPersonas, array(
            'userId' => $user['id']
        ))->fetchAll();

        $personas = $this->findPersonaGallery($personas);
        $user['favouritePersonas'] = $personas;

        return $user;
    }

    private function getFavouritePlaces($user) {
        $sqlRelatedPersonas = "SELECT pl.*, UNIX_TIMESTAMP(CAST(pl.created_at AS DATETIME)) as created_at_timestamp,
                                  CASE
                                     WHEN f.place_id IS NOT NULL AND f.user_id = :userId THEN true
                                     ELSE false
                                  END as favourited,
                                  (SELECT COUNT(*) FROM place_favourites fav WHERE fav.place_id = f.place_id) as totalFav
                              FROM places pl
                              INNER JOIN place_favourites f ON f.place_id = pl.id
                              WHERE f.user_id = :userId
                              GROUP BY pl.id";
        $places = $this->getEntityManager()->getConnection()->executeQuery($sqlRelatedPersonas, array(
            'userId' => $user['id']
        ))->fetchAll();

        $places = $this->findPlaceGallery($places);
        $user['favouritePlaces'] = $places;

        return $user;
    }



    private function findPersonaGallery($personas) {
        foreach($personas as &$persona) {
            $sqlPersonaGallery = "SELECT g.* FROM persona_gallery g WHERE g.persona_id = :personaId";
            $gallery = $this->getEntityManager()->getConnection()->executeQuery($sqlPersonaGallery, array(
                'personaId' => $persona['id']
            ))->fetchAll();

            $persona['gallery'] = $gallery;
        }

        return $personas;
    }

    private function findPlaceGallery($places) {
        foreach($places as &$place) {
            $sqlPlaceGallery = "SELECT g.* FROM place_gallery g WHERE g.place_id = :placeId";
            $gallery = $this->getEntityManager()->getConnection()->executeQuery($sqlPlaceGallery, array(
                'placeId' => $place['id']
            ))->fetchAll();

            $place['gallery'] = $gallery;
        }

        return $places;
    }

}
