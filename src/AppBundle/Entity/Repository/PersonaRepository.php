<?php

namespace AppBundle\Entity\Repository;

/**
 * PersonaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonaRepository extends \Doctrine\ORM\EntityRepository {

    public function getOne($personaId, $userId) {
        $sql = "SELECT p.*, UNIX_TIMESTAMP(CAST(p.created_at AS DATETIME)) as created_at_timestamp,
                  CASE
                     WHEN EXISTS(SELECT 1 FROM persona_favourites as fff WHERE fff.user_id = :userId AND fff.persona_id = p.id) THEN true
                     ELSE false
                  END as favourited,
                  CASE
                     WHEN EXISTS(SELECT 1 FROM persona_likes as lll WHERE lll.user_id = :userId AND lll.persona_id = p.id) THEN true
                     ELSE false
                  END as liked,
                  (SELECT COUNT(*) FROM persona_favourites fav WHERE fav.persona_id = f.persona_id) as totalFav,
                  (SELECT COUNT(*) FROM persona_likes lik WHERE lik.persona_id = l.persona_id) as totalLikes
                FROM personas p
                LEFT JOIN persona_favourites f ON f.persona_id = p.id
                LEFT JOIN persona_likes l ON l.persona_id = p.id
                WHERE p.id = :personaId
                GROUP BY p.id
                LIMIT 0, 50
                ";

        $personas = $this->getEntityManager()->getConnection()->executeQuery($sql, array(
            'personaId' => $personaId,
            'userId' => $userId
        ))->fetchAll();

        $personas = $this->findGallery($personas);
        $personas = $this->getRelatedPlaces($personas, $userId);
        return (count($personas) > 0) ? $personas[0] : null;
    }

    /**
     * Get all personas by name
     * @param $string
     * @return array
     */
    public function search($string, $userId) {
//        $qb = $this->createQueryBuilder('p')
//            ->select('p')
//            ->where('p.name like :string')
//            ->orWhere('p.occupation like :string')
//            ->setParameter('string', '%' . $string . '%')
//            ->setMaxResults(50);
//
//        return $qb->getQuery()->getResult();

        $sqlFindPersonas = "SELECT p.*,
                              CASE
                                 WHEN EXISTS(SELECT 1 FROM persona_favourites as fff WHERE fff.user_id = :userId AND fff.persona_id = p.id) THEN true
                                 ELSE false
                              END as favourited,
                              CASE
                                 WHEN EXISTS(SELECT 1 FROM persona_likes as lll WHERE lll.user_id = :userId AND lll.persona_id = p.id) THEN true
                                 ELSE false
                              END as liked,
                              (SELECT COUNT(*) FROM persona_favourites fav WHERE fav.persona_id = f.persona_id) as totalFav,
                              (SELECT COUNT(*) FROM persona_likes lik WHERE lik.persona_id = l.persona_id) as totalLikes
                            FROM personas p
                            LEFT JOIN persona_favourites f ON f.persona_id = p.id
                            LEFT JOIN persona_likes l ON l.persona_id = p.id
                            WHERE p.name LIKE :string
                            OR p.occupation LIKE :string
                            GROUP BY p.id
                            LIMIT 0, 50
                            ";

        $personas = $this->getEntityManager()->getConnection()->executeQuery($sqlFindPersonas, array(
            'string' => '%' . $string . '%',
            'userId' => $userId
        ))->fetchAll();

        $personas = $this->findGallery($personas);
        $personas = $this->getRelatedPlaces($personas, $userId);
        return $personas;
    }


    /**
     * @return array
     */
    public function getAll($userId) {
        $sqlFindPersonas = "SELECT p.*, f.persona_id AS perosona_moj_ID,
                              CASE
                                 WHEN EXISTS(SELECT 1 FROM persona_favourites as fff WHERE fff.user_id = :userId AND fff.persona_id = p.id) THEN true
                                 ELSE false
                              END as favourited,
                              CASE
                                 WHEN EXISTS(SELECT 1 FROM persona_likes as lll WHERE lll.user_id = :userId AND lll.persona_id = p.id) THEN true
                                 ELSE false
                              END as liked,
                              (SELECT COUNT(*) FROM persona_favourites fav WHERE fav.persona_id = f.persona_id) as totalFav,
                              (SELECT COUNT(*) FROM persona_likes lik WHERE lik.persona_id = l.persona_id) as totalLikes
                            FROM personas p
                            LEFT JOIN persona_favourites f ON f.persona_id = p.id
                            LEFT JOIN persona_likes l ON l.persona_id = p.id
                            GROUP BY p.id
                            ORDER BY created_at DESC";

        $personas = $this->getEntityManager()->getConnection()->executeQuery($sqlFindPersonas, array(
            'userId' => $userId
        ))->fetchAll();

        $personas = $this->findGallery($personas);
        $personas = $this->getRelatedPlaces($personas, $userId);
        return $personas;
    }


    private function findGallery($personas) {
        foreach($personas as &$persona) {
            $sqlPersonaGallery = "SELECT g.* FROM persona_gallery g WHERE g.persona_id = :personaId";
            $gallery = $this->getEntityManager()->getConnection()->executeQuery($sqlPersonaGallery, array(
                'personaId' => $persona['id']
            ))->fetchAll();

            $persona['gallery'] = $gallery;
        }

        return $personas;
    }

    private function findPlaceGallery($places) {
        foreach($places as &$place) {
            $sqlPlaceGallery = "SELECT g.* FROM place_gallery g WHERE g.place_id = :placeId";
            $gallery = $this->getEntityManager()->getConnection()->executeQuery($sqlPlaceGallery, array(
                'placeId' => $place['id']
            ))->fetchAll();

            $place['gallery'] = $gallery;
        }

        return $places;
    }

    /**
     * Related places
     * @param $places
     * @return mixed
     * @throws \Doctrine\DBAL\DBALException
     */
    private function getRelatedPlaces($personas, $userId) {
        foreach($personas as &$persona) {
            $sqlRelatedPlaces = "SELECT pla.*, UNIX_TIMESTAMP(CAST(pla.created_at AS DATETIME)) as created_at_timestamp,
                                  CASE
                                     WHEN EXISTS(SELECT 1 FROM place_favourites as fff WHERE fff.user_id = :userId AND fff.place_id = pla.id) THEN true
                                     ELSE false
                                  END as favourited,
                                  (SELECT COUNT(*) FROM place_favourites fav WHERE fav.place_id = f.place_id) as totalFav
                              FROM places pla
                              INNER JOIN persona_place pp ON pp.place_id = pla.id
                              INNER JOIN personas p ON pp.persona_id = p.id
                              LEFT JOIN place_favourites f ON f.place_id = pla.id
                              WHERE p.id = :personaId
                              GROUP BY pla.id";
            $places = $this->getEntityManager()->getConnection()->executeQuery($sqlRelatedPlaces, array(
                'personaId' => $persona['id'],
                'userId' => $userId
            ))->fetchAll();

            $places = $this->findPlaceGallery($places);
            $persona['relatedPlaces'] = $places;
        }

        return $personas;
    }

}
